#!/bin/bash
#

# default config file text, used if no pre-existing one is found.
fresh_config='#!/bin/bash
#

# config
panel_fifo="/tmp/lemonbar_heru"
parser="/usr/local/share/lemonbar/lemonbar_parser.sh"
height="20"
pos_x="0"
pos_y="12"
font="Audimat Mono:style=Regular:size=7:dpi=96:antialias=true"
highlightfont="Audimat Mono:style=BoldOblique:size=7:dpi=96:antialias=true"
iconfont="FontAwesome:size=8:dpi=96:antialias=true"
snd_card=1
snd_channel="PCM"

# colors 
color_back="#00374244"              # Default background
color_fore="#FFDDDDDD"              # Default foreground
color_sec_b1="#BB374244"            # Background for section 1
color_sec_b2="#99374244"            # Background for section 2
color_icon="#FFc1a561"              # For icons

# space between bar elements
stab="%{O10}"

# icons
icon_updates=""
icon_wifi=""
icon_clock=""                      # Clock icon
icon_vol_low="%{O3}"               # Volume low icon, plus padding to keep alignment
icon_vol_high=""                   # Volume high icon
icon_vol_mute="%{O5}"              # Volume muted icon, plus padding to keep alignment
icon_bat_low=""
icon_bat_half=""
icon_bat_high=""
icon_bat_full=""                # Battery full icon

# hotspot configs
right_click_cmd[0]="urxvt -e nmtui"
right_click_cmd[1]="pavucontrol"
right_click_cmd[2]="xfce4-power-manager-settings"
right_click_cmd[3]="gsimplecal"
right_click_cmd[4]="python /usr/bin/apt-notifier.py show"'

# default conky config text, used if no pre-existing one is found.
fresh_conky='background yes
update_interval 2
total_run_times 0
override_utf8_locale yes
short_units yes
uppercase no
out_to_console yes
out_to_x no
if_up_strictness address
format_human_readable true

TEXT
CKY\
${time %a %d %b %I:%M} \
${battery_percent BAT1} \
${wireless_essid wlan0} \
${wireless_link_qual_perc wlan0} \'

# if we can't find a config file, create one using above defaults
if [ ! -e $HOME/.config/lemonbar/lemonbar.conf ]; then
    printf "%s\n" "${fresh_config}" > $HOME/.config/lemonbar/lemonbar.conf
    sleep 1s
fi

# if we can't find a conky file, create one using above defaults
if [ ! -e $HOME/.config/lemonbar/lemonbar_conky ]; then
    printf "%s\n" "${fresh_conky}" > $HOME/.config/lemonbar/lemonbar_conky
    sleep 1s
fi

# load config values
. $HOME/.config/lemonbar/lemonbar.conf

# is lemonbar-launch already running?
if [ $(pgrep -cx $(basename $0)) -gt 1 ]; then
    printf "%s" "The status bar is already running." >&2
    exit 1
fi

# IT'S A TRAP
trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

# initialize our fifo pipe
[ -e "${panel_fifo}" ] && rm "${panel_fifo}"
mkfifo "${panel_fifo}"

# conky (CKY)
conky -c $HOME/.config/lemonbar/lemonbar_conky > "${panel_fifo}" &

# function to correctly pad our screens, based upon config values
function pad_it() {
    tmp=0
    while read line; do
        # figure out our current herbstluft padding
        current_pad=$(herbstclient list_padding ${tmp} | awk '{print $1}')
        vertical_pad=$(($height+$pos_y))
        # pad herbst properly, according to our bar dimensions and config
        if [[ $current_pad != $vertical_pad ]]; then
            herbstclient pad $tmp $vertical_pad 0 0 0
        fi
        let tmp=$tmp+1
    done < <(herbstclient list_monitors | awk '{print $1}')
}

# function that launches lemonbar, piped with fifo info from loops below
function pipe_it() {
    # loop the fifo pipe
    cat "${panel_fifo}" | ${parser} \
        | lemonbar -p -f "${font}" -f "${highlightfont}" -f "${iconfont}" -g "${geometry}" -B "${color_back}" -F "${color_fore}" -a "${#right_click_cmd[@]}" | sh &
}

function check_updates() {
    # available package updates
    num_updates=0
    num_updates=$(python /usr/bin/apt-notifier.py updates)
    printf "%s%s\n" "UPDATES" "$num_updates" > "${panel_fifo}"
}

# measure initial total screen width, spanning all our monitors
total_width=0
while read line; do
    let total_width=$total_width+$line
done < <(xrandr -q | grep " connected " | sed "s@primary @@g" | awk '{print $3}' | cut -dx -f1)

# calculate what our bar geometry should be, based upon above routines
geometry="${total_width}x${height}+${pos_x}+${pos_y}"

# pad our screens
pad_it &

# start piping info to lemonbar, and running related routines
while :; do
    # check if our total width has changed, ie. screens were added/removed
    current_total_width=0
    while read line; do
        let current_total_width=$current_total_width+$line
    done < <(xrandr -q | grep " connected " | sed "s@primary @@g" | awk '{print $3}' | cut -dx -f1)
    
    # if width has changed, kill current lemonbar instance, then restart
    if [[ $total_width != $current_total_width ]]; then
        total_width=$current_total_width
        geometry="${current_total_width}x${height}+${pos_x}+${pos_y}"
        killall lemonbar
        pad_it &
        check_updates &
        pipe_it &
    fi
    
    # monitors and workspaces (WSN#)
    tmp=0                                                                       
    while read line; do
        name=$(echo $line | awk '{print $1}')
        state=$(echo $line | awk '{print $2}')
        if [[ ${state} != "[FOCUS]" ]]; then
            printf "%s%s\n" "WSN${tmp}" "${name}" > "${panel_fifo}"
        else
            printf "%s%s\n" "WSN${tmp}" "%{T2}${name}%{T1}" > "${panel_fifo}"
        fi     
        let tmp=$tmp+1                                                          
    done < <(herbstclient list_monitors | awk '{print $5" "$6}' | tr -d '"')
    
    # volume (VOL)
    vol=$(amixer -c $snd_card -M get ${snd_channel} | grep "Front Left: Playback" | cut -d"[" -f2 | cut -d"%" -f1)
    volstate=$(amixer -c $snd_card -M get ${snd_channel} | grep "Front Left: Playback" | cut -d"[" -f4 | cut -d"]" -f1)
    
    # dynamic vol icon
    if [[ ${volstate} == "off" || ${vol} == 0 ]]; then
        printf "%s%s\n" "VOLICON" "${icon_vol_mute}" > "${panel_fifo}"
    elif [[ ${vol} -ge 50 || ${vol} == 100 ]]; then    
        printf "%s%s\n" "VOLICON" "${icon_vol_high}" > "${panel_fifo}"
    elif [[ ${vol} < 50 ]]; then
        printf "%s%s\n" "VOLICON" "${icon_vol_low}" > "${panel_fifo}"
    fi
    
    # check if muted, print accordingly
    if [[ ${volstate} != "off" ]]; then
        if [[ ${vol} == 0 ]]; then
            printf "%s%4s\n" "VOL" "mute" > "${panel_fifo}"
        else
            printf "%s%4s\n" "VOL" "${vol}%" > "${panel_fifo}"
        fi
    elif [[ ${volstate} == "off" ]]; then
        printf "%s%4s\n" "VOL" "mute" > "${panel_fifo}"
    fi
    
    # if lemonbar crashed, or is exiting with errors (sometimes when monitors
    # are being configured), then lets wait while we continue to try to
    # successfully relaunch it
    while ! pgrep -x "lemonbar" > /dev/null ; do
        pipe_it &
        sleep 2s
    done
    
    # wait 1 sec
    sleep 1s
done &

while :; do
    # available package updates
    check_updates &
    echo "update loop"
    # wait 30 seconds
    sleep 30s
done &

# again, pause if for some reason lemonbar doesn't want to successfully launch
while ! pgrep -x "lemonbar" > /dev/null ; do
    pipe_it &
    sleep 2s
done

wait
